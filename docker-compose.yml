services:
  # Jaeger - OpenTelemetry Tracing Backend
  jaeger:
    image: jaegertracing/jaeger:latest
    container_name: trailmarks-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "14268:14268"  # Jaeger HTTP Collector (for direct HTTP tracing)
      - "6831:6831/udp" # Jaeger UDP (optional, for legacy clients)
      - "6832:6832/udp" # Jaeger UDP (optional, for legacy clients)
    networks:
      - trailmarks-network
    restart: unless-stopped

  # NGINX Proxy for OTLP with CORS support
  nginx-otlp:
    image: nginx:alpine
    container_name: trailmarks-nginx-otlp
    volumes:
      - ./nginx-otlp.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "6060:6060"    # OTLP HTTP proxy with CORS
    networks:
      - trailmarks-network
    depends_on:
      - jaeger
    restart: unless-stopped

  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:16-3.4-alpine
    container_name: trailmarks-postgres
    environment:
      POSTGRES_DB: trailmarks
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: Europe/Berlin
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - trailmarks-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trailmarks-backend
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=trailmarks;Username=postgres;Password=postgres;SSL Mode=Disable;Timezone=Europe/Berlin"
      UseSqlite: "false"
      OpenTelemetry__OtlpEndpoint: "http://jaeger:4317"
    ports:
      - "8080:8080"
    networks:
      - trailmarks-network
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
    restart: unless-stopped
    command: 
      - dotnet
      - TrailmarksApi.dll
      - -DbInit

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=http://localhost:8080
    container_name: trailmarks-frontend
    ports:
      - "4200:80"
    networks:
      - trailmarks-network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local

networks:
  trailmarks-network:
    driver: bridge
